service: big-mouth
# org: nadtakanjones
# app: big-mouth-app

plugins:
  - serverless-pseudo-parameters #this plug in is helping getting useful parameters
  - serverless-sam # convert serverless.yml to SAM

provider:
  name: aws
  runtime: nodejs12.x
  profile: nadtakan
  region: us-west-2
  stage: ${opt:stage, "dev"}
  # apiKeys:
  #   - restaurantKey-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:scan
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/restaurants
    - Effect: Allow
      Action: execute-api:Invoke
      Resource: arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:*/*/GET/restaurants
    - Effect: Allow
      Action: kinesis:PutRecord
      Resource: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events
    # iam permission sns
    - Effect: Allow
      Action: sns:Publish
      Resource: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurant-notification
  usagePlan:
    quota:
      limit: 10
      period: DAY
    throttle:
      burstLimit: 5
      rateLimit: 10

package:
  include:
    - node_modules/**

custom:
  tableName: restaurants
  cognitoName: ${self:service}-cognito

functions:
  get-index:
    handler: functions/get-index.handler
    events:
      - http:
          path: /
          method: get
    environment:
      restaurant_api: 
        Fn::Join:
          - ''
          - - https://
            - Ref: ApiGatewayRestApi
            - .execute-api.#{AWS::Region}.amazonaws.com/${opt:stage}/restaurants
      orders_api: 
        Fn::Join:
          - ''
          - - https://
            - Ref: ApiGatewayRestApi
            - .execute-api.#{AWS::Region}.amazonaws.com/${opt:stage}/orders
      cognito_user_pool_id: 
        Fn::ImportValue: ${self:custom.cognitoName}:${self:provider.stage}:UserPoolId # chage this to import from output cognito
      cognito_client_id: 
        Fn::ImportValue: ${self:custom.cognitoName}:${self:provider.stage}:UserPoolClientWebId # change this to import from output cognito

  get-restaurants:
    handler: functions/get-restaurants.handler
    events:
      - http:
          path: /restaurants/
          method: get
          # private: true # this is how secure with api key 
          authorizer: aws_iam # secure api with aws_iam
    environment:
      restaurants_table: ${self:custom.tableName}

  search-restaurants:
    handler: functions/search-restaurants.handler
    events:
      - http:
          path: /restaurants/search
          method: post
          authorizer: 
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/${ssm:big-mouth-cognito-dev-user-pool-id} #Pool ARN , secure api with cognito user pool
    environment:
      restaurants_table: ${self:custom.tableName}
      
  insert-restaurants:
    handler: functions/insert-restaurants.handler
    events:
      - http:
          path: /insert
          method: get
          authorizer: aws_iam

  place-order:
    handler: functions/place-order.handler
    events:
      - http:
          path: /orders
          method: post
          authorizer: 
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/${ssm:big-mouth-cognito-dev-user-pool-id} #Pool ARN , secure api with cognito user pool
    environment:
      order_events_stream: order-events
  
  notify-restaurant:
    handler: functions/notify-restaurant.handler
    events:
      - stream:
          arn: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events
    environment:
      order_events_stream: order-events
      restaurant_notification_topic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurant-notification

resources:
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/kinesis.yml)}
  - ${file(resources/sns.yml)}





