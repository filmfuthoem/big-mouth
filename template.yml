AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'SAM template for Serverless framework service: '
Resources:
  GetIndex:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: functions/get-index.handler
      Runtime: nodejs12.x
      CodeUri: /Users/admin/Documents/work/Projects/big-mouth/.serverless/big-mouth.zip
      MemorySize: 128
      Timeout: 3
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 'dynamodb:scan'
              Resource: >-
                arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/restaurants
            - Effect: Allow
              Action: 'execute-api:Invoke'
              Resource: >-
                arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:*/*/GET/restaurants
      Environment:
        Variables:
          restaurant_api: x #copy api url from api gateway
          cognito_user_pool_id: us-west-x #copy api url from api gateway
          cognito_client_id: x #copy api url from api gateway
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId:
              Ref: BigMouth
  BigMouth:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: dev
      DefinitionBody:
        swagger: '2.0'
        info:
          title:
            Ref: 'AWS::StackName'
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIndex.Arn}/invocations
              responses: {}
          /restaurants/:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRestaurants.Arn}/invocations
              responses: {}
              security:
                - Aws_iam: []
          /restaurants/search:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchRestaurants.Arn}/invocations
              responses: {}
          /insert:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InsertRestaurants.Arn}/invocations
              responses: {}
              security:
                - Aws_iam: []
        securityDefinitions:
          Aws_iam:
            type: apiKey
            name: Aws_iam
            in: header
            x-amazon-apigateway-authtype: oauth2
            x-amazon-apigateway-authorizer:
              type: token
              authorizerUri:
                'Fn::Sub': >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Aws_iam.Arn}/invocations
              identityValidationExpression: '^x-[a-z]+'
              authorizerResultTtlInSeconds: 60
  GetIndexLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - GetIndex
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: GetIndex
      Principal: apigateway.amazonaws.com
  GetRestaurants:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: functions/get-restaurants.handler
      Runtime: nodejs12.x
      CodeUri: /Users/admin/Documents/work/Projects/big-mouth/.serverless/big-mouth.zip
      MemorySize: 128
      Timeout: 3
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 'dynamodb:scan'
              Resource: >-
                arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/restaurants
            - Effect: Allow
              Action: 'execute-api:Invoke'
              Resource: >-
                arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:*/*/GET/restaurants
      Environment:
        Variables:
          restaurants_table: restaurants
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /restaurants/
            Method: get
            RestApiId:
              Ref: BigMouth
  Aws_iamResourcePolicy:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - Aws_iam
          - Arn
      Principal: apigateway.amazonaws.com
      SourceAccount:
        Ref: 'AWS::AccountId'
  GetRestaurantsLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - GetRestaurants
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: GetRestaurants
      Principal: apigateway.amazonaws.com
  SearchRestaurants:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: functions/search-restaurants.handler
      Runtime: nodejs12.x
      CodeUri: /Users/admin/Documents/work/Projects/big-mouth/.serverless/big-mouth.zip
      MemorySize: 128
      Timeout: 3
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 'dynamodb:scan'
              Resource: >-
                arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/restaurants
            - Effect: Allow
              Action: 'execute-api:Invoke'
              Resource: >-
                arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:*/*/GET/restaurants
      Environment:
        Variables:
          restaurants_table: restaurants
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /restaurants/search
            Method: post
            RestApiId:
              Ref: BigMouth
  SearchRestaurantsLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - SearchRestaurants
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: SearchRestaurants
      Principal: apigateway.amazonaws.com
  InsertRestaurants:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: functions/insert-restaurants.handler
      Runtime: nodejs12.x
      CodeUri: /Users/admin/Documents/work/Projects/big-mouth/.serverless/big-mouth.zip
      MemorySize: 128
      Timeout: 3
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 'dynamodb:scan'
              Resource: >-
                arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/restaurants
            - Effect: Allow
              Action: 'execute-api:Invoke'
              Resource: >-
                arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:*/*/GET/restaurants
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /insert
            Method: get
            RestApiId:
              Ref: BigMouth
  InsertRestaurantsLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - InsertRestaurants
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: InsertRestaurants
      Principal: apigateway.amazonaws.com
